<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>Insert title here</title>

<style>
.grid line {
	stroke: lightgrey;
	stroke-opacity: 0.7;
}

.lineChart {
	fill: none;
	stroke: steelblue;
	stroke-width: 1.5px;
}

.lineChart:hover {
	stroke: black;
	stroke-width: 3px;
}
</style>
</head>
<!-- <script src="https://d3js.org/d3.v4.min.js"></script> -->
<!-- <script src="d3.min.js"></script> -->
<body>
<script src="lib/d3.v4.min.js"></script>
<svg width="700" height="320"></svg>
	<script type="text/javascript">
		var series = [ "2017", "2018" ];

		var dataset = [ {
			'5/1' : 0,
			'5/8' : 27
		}
		,{
			'5/15' : 20,	
			'5/22' : 57
		}
		];

		var keys;
		var data = [];

// 		dataset.forEach(function(d, i) {
// 			keys = d3.keys(dataset[i]);
// 			data[i] = keys.map(function(key) {
// 				return {
// 					x : key,
// 					y : d[key]
// 				};
// 			})
// 		});
var data = [[{ x: "5/1", y: 0 ,xx:0, z:50},{ x: "5/8", y: 27 ,xx:1,z:100},{ x: "5/15", y: 35 ,xx:2,z:150},{ x: "5/22", y: 47,xx:3,z:670 }]
			,[{ x: "5/15", y: 0 },{ x: "5/22", y: 57 },{ x: "5/22", y: 57 },{ x: "6/1", y: 67 },{ x: "6/7", y: 77 },{ x: "6/14", y: 100 }]
			];
		var margin = {
			left : 20,
			top : 10,
			right : 10,
			bottom : 20
		};
		var svg = d3.select("svg");
		var width = parseInt(svg.style("width"), 10) - margin.left
				- margin.right;
		var height = parseInt(svg.style("height"), 10) - margin.top
				- margin.bottom;

		var svgG = svg.append("g").attr("transform",
				"translate(" + margin.left + "," + margin.top + ")");

		var keys = ['5/1','5/8','5/15' ,'5/22' ,'6/1','6/7','6/14','6/21','6/30','7/1','7/5','7/10']; 
		var xScale = d3.scalePoint()//scaleBand() scaleOrdinal
		.domain(keys).rangeRound([ 0, width ]);

// 		var yScale = d3.scaleLinear().domain([ 0, d3.max(dataset, function(d) {
// 			return d3.max(keys, function(key) {
// 				return d[key];
// 			});
// 		}) ]).nice().range([ height, 0 ]);
		
		var yScale = d3.scaleLinear().domain([0, 100])
	    .range([ height, 0 ]);
// 		var ticks = yScale.ticks(1);
// 	    var tickFormat = yScale.tickFormat(1, "+%");

// 	ticks.map(tickFormat); //
		var colors = d3.scaleOrdinal(d3.schemeCategory20);

		svgG.append("g").attr("class", "grid").attr("transform",
				"translate(0," + height + ")").call(
				d3.axisBottom(xScale).tickSize(-height));

		svgG.append("g").attr("class", "grid").call(
				d3.axisLeft(yScale).ticks(5).tickSize(-width));

		var line = d3.area().x(function(d) {
			return xScale(d.x);
		}).y0(yScale(0)).y1(function(d) {
			return yScale(d.y);
		});

		var lineG = svgG.append("g")
						.selectAll("g")
						.data(data)
						.enter();

		lineG.append("path")
			 .attr("class", "lineChart")
			 .style("stroke",
				function(d, i) {
					return colors(series[i]);
				})
			 .style("fill",function(d, i) {
					return colors(series[i]);
				})
			 .attr("d", line)
// 			 .attr("d",  d3.area()
// 				        .x(function(d) { return x(d.x) })
// 				        .y(function(d) { return y(d.y) })
// 					 );
		
// 		data = [data];
			 svgG.append("g")
				.selectAll("g")
				.data(data[0])
				.enter().append('circle')
		.attr("class", "circcc")
		 .attr("cx", function(d,i) {
				return d.xx*(670/12)})
        .attr("cy",  function(d,i) {
// 			return 0})
			return 290-(d.y*2.9)})
		.attr('r', 4);
		
		var legend = svgG.append("g")
						 .attr("text-anchor", "end")
						 .selectAll("g")
						 .data(series)
						 .enter()
						 .append("g")
						 .attr("transform",
							 function(d, i) {
								return "translate(0," + i * 20 + ")";
							 });

		legend.append("rect").attr("x", width - 20).attr("width", 19).attr(
				"height", 19).attr("fill", colors);

		legend.append("text").attr("x", width - 30).attr("y", 9.5).attr("dy",
				"0.32em").text(function(d) {
			return d;
		});
		


	</script>
</body>
</html>
