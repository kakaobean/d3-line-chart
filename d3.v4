<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>Insert title here</title>

<style>
.grid line {
	stroke: lightgrey;
	stroke-opacity: 0.7;
}

.lineChart {
	fill: none;
	stroke: steelblue;
	stroke-width: 1.5px;
}

.lineChart:hover {
	stroke: black;
	stroke-width: 3px;
}
</style>
</head>
<script src="https://d3js.org/d3.v4.min.js"></script>
<!-- <script src="d3.min.js"></script> -->
<body>
<svg width="700" height="320"></svg>
	<script type="text/javascript">
		var series = [ "2017", "2018" ];

		var dataset = [ {
			'5/1' : 17,
			'5/8' : 27,
			'5/15' : 37,
			'5/22' : 27,
			'6/4' : 17
		}];

		var keys = d3.keys(dataset[0]);
		var data = [];

		dataset.forEach(function(d, i) {
			data[i] = keys.map(function(key) {
				return {
					x : key,
					y : d[key]
				};
			})
		});

		var margin = {
			left : 40,
			top : 10,
			right : 10,
			bottom : 20
		};
		var svg = d3.select("svg");
		var width = parseInt(svg.style("width"), 10) - margin.left
				- margin.right;
		var height = parseInt(svg.style("height"), 10) - margin.top
				- margin.bottom;

		var svgG = svg.append("g").attr("transform",
				"translate(" + margin.left + "," + margin.top + ")");

		var xScale = d3.scalePoint()//scaleBand() scaleOrdinal
		.domain(keys).rangeRound([ 0, width ]);

// 		var yScale = d3.scaleLinear().domain([ 0, d3.max(dataset, function(d) {
// 			return d3.max(keys, function(key) {
// 				return d[key];
// 			});
// 		}) ]).nice().range([ height, 0 ]);
		
		var yScale = d3.scaleLinear().domain([10, 100])
	    .range([ height, 0 ]);
		
		
// 		var ticks = yScale.ticks(1);
// 	    var tickFormat = yScale.tickFormat(1, "+%");

// 	ticks.map(tickFormat); //
		var colors = d3.scaleOrdinal(d3.schemeCategory20);

		svgG.append("g").attr("class", "grid").attr("transform",
				"translate(0," + height + ")").call(
				d3.axisBottom(xScale).tickSize(-height));

		svgG.append("g").attr("class", "grid").call(
				d3.axisLeft(d3.scaleLinear().domain([0.1, 1]).range([ height, 0 ])).ticks(10).tickFormat( d3.format('.0%')).tickSize(-width));

		var line = d3.line().curve(d3.curveBasis).x(function(d) {
			return xScale(d.x);
		}).y(function(d) {
			return yScale(d.y);
		});

		var lineG = svgG.append("g").selectAll("g").data(data).enter().append(
				"g");

		lineG.append("path").attr("class", "lineChart").style("stroke",
				function(d, i) {
					return colors(series[i]);
				}).attr("d", line);

		var legend = svgG.append("g").attr("text-anchor", "end").selectAll("g")
				.data(series).enter().append("g").attr("transform",
						function(d, i) {
							return "translate(0," + i * 20 + ")";
						});

		legend.append("rect").attr("x", width - 20).attr("width", 19).attr(
				"height", 19).attr("fill", colors);

		legend.append("text").attr("x", width - 30).attr("y", 9.5).attr("dy",
				"0.32em").text(function(d) {
			return d;
		});
		

	</script>
</body>
</html>
